{"version":3,"file":"formatDate.js","sourceRoot":"","sources":["../src/formatDate.ts"],"names":[],"mappings":";;;AAAA,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAE3E,SAAgB,gBAAgB,CAAC,KAAoB;IACnD,MAAM,OAAO,GAAG,qBAAqB,CAAC;IACtC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpD,OAAO,KAAK,CAAC;KACd;IAED,IAAI,KAAK,YAAY,IAAI,EAAE;QACzB,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,MAAM,IAAI,SAAS,CAAC,0BAA0B,KAAK,EAAE,CAAC,CAAC;AACzD,CAAC;AAXD,4CAWC;AAED,SAAwB,UAAU,CAAC,IAAU;IAC3C,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;AACnG,CAAC;AAFD,6BAEC","sourcesContent":["const padNumber = (num: number) => (num < 10 ? `0${num}` : num.toString());\n\nexport function ensureDateString(input: Date | string): string {\n  const RE_DATE = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (typeof input === 'string' && RE_DATE.test(input)) {\n    return input;\n  }\n\n  if (input instanceof Date) {\n    return formatDate(input);\n  }\n\n  throw new TypeError(`Invalid date argument: ${input}`);\n}\n\nexport default function formatDate(date: Date) {\n  return `${date.getUTCFullYear()}-${padNumber(date.getMonth() + 1)}-${padNumber(date.getDate())}`;\n}\n"]}