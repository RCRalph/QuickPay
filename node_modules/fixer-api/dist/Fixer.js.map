{"version":3,"file":"Fixer.js","sourceRoot":"","sources":["../src/Fixer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA0C;AAC1C,6CAAgD;AAoEhD,MAAsB,KAAK;IAGzB,YAAY,OAA+B,EAAE;QAC3C,IAAI,CAAC,YAAY,GAAG;YAClB,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,uBAAW;YACpC,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,KAA6B,EAAE;QACrD,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACjE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IAEK,OAAO,CAAC,IAAmB,EAAE,OAAiC,EAAE;;YACpE,OAAO,IAAI,CAAC,OAAO,CAAiB,IAAI,6BAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC;KAAA;IAEK,MAAM,CAAC,OAAiC,EAAE;;YAC9C,OAAO,IAAI,CAAC,OAAO,CAAiB,SAAS,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC;KAAA;IAEK,OAAO,CAAC,OAAiC,EAAE;;YAC/C,OAAO,IAAI,CAAC,OAAO,CAAuB,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9D,CAAC;KAAA;IAEK,OAAO,CACX,IAAY,EACZ,EAAU,EACV,MAAc,EACd,IAAoB;;YAEpB,OAAO,IAAI,CAAC,OAAO,CAAwB,UAAU,EAAE;gBACrD,IAAI;gBACJ,EAAE;gBACF,MAAM;gBACN,IAAI;aACL,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,UAAU,CACd,SAAwB,EACxB,OAAsB,EACtB,OAAiC,EAAE;;YAEnC,MAAM,KAAK,GAAG,6BAAgB,CAAC,SAAS,CAAC,CAAC;YAC1C,MAAM,GAAG,GAAG,6BAAgB,CAAC,OAAO,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,OAAO,CAA2B,aAAa,kBACzD,UAAU,EAAE,KAAK,EACjB,QAAQ,EAAE,GAAG,IACV,IAAI,EACP,CAAC;QACL,CAAC;KAAA;CAGF;AAzDD,sBAyDC","sourcesContent":["import { DEFAULT_URL } from './constants';\nimport { ensureDateString } from './formatDate';\n\nexport interface IFixerError {\n  readonly type: string;\n  readonly info: string;\n}\n\nexport interface IFixerRates {\n  readonly [currency: string]: number;\n}\n\nexport interface IFixerResponse {\n  readonly base: string;\n  readonly date: string;\n  readonly rates: IFixerRates;\n  readonly timestamp: number;\n  readonly error?: IFixerError;\n}\n\nexport interface IFixerSymbols {\n  readonly [symbol: string]: string;\n}\n\nexport interface IFixerSymbolResponse {\n  readonly symbols: IFixerSymbols;\n  readonly error?: IFixerError;\n}\n\nexport interface IFixerConvertRequestOptions {\n  readonly from: string;\n  readonly to: string;\n  readonly amount: number;\n  readonly date?: string;\n}\n\nexport interface IFixerConvertResponse {\n  readonly success: boolean;\n  readonly query: {\n    readonly from: string;\n    readonly to: string;\n    readonly amount: number;\n  };\n  readonly date: string;\n  readonly result: number;\n}\n\nexport interface IFixerTimeseriesResponse {\n  readonly success: boolean;\n  readonly start_date: string;\n  readonly end_date: string;\n  readonly base: string;\n  readonly rates: Record<string, Record<string, number>>;\n}\n\nexport interface IRawParams {\n  [key: string]: any;\n}\nexport interface IRequestOptions {\n  base?: string;\n  symbols?: string[];\n  access_key: string;\n}\n\nexport interface IBasicOptions {\n  baseUrl: string;\n  accessKey?: string;\n}\n\nexport abstract class Fixer {\n  protected basicOptions: IBasicOptions;\n\n  constructor(opts: Partial<IBasicOptions> = {}) {\n    this.basicOptions = {\n      baseUrl: opts.baseUrl || DEFAULT_URL,\n      accessKey: opts.accessKey\n    };\n  }\n\n  set({ baseUrl, accessKey }: Partial<IBasicOptions> = {}): Fixer {\n    this.basicOptions.baseUrl = baseUrl || this.basicOptions.baseUrl;\n    this.basicOptions.accessKey = accessKey || this.basicOptions.accessKey;\n    return this;\n  }\n\n  async forDate(date: Date | string, opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\n    return this.request<IFixerResponse>(`/${ensureDateString(date)}`, opts);\n  }\n\n  async latest(opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\n    return this.request<IFixerResponse>('/latest', opts);\n  }\n\n  async symbols(opts: Partial<IRequestOptions> = {}): Promise<IFixerSymbolResponse> {\n    return this.request<IFixerSymbolResponse>('/symbols', opts);\n  }\n\n  async convert(\n    from: string,\n    to: string,\n    amount: number,\n    date?: Date | string\n  ): Promise<IFixerConvertResponse> {\n    return this.request<IFixerConvertResponse>('/convert', {\n      from,\n      to,\n      amount,\n      date\n    });\n  }\n\n  async timeseries(\n    startDate: Date | string,\n    endDate: Date | string,\n    opts: Partial<IRequestOptions> = {}\n  ) {\n    const start = ensureDateString(startDate);\n    const end = ensureDateString(endDate);\n    return this.request<IFixerTimeseriesResponse>('/timeseries', {\n      start_date: start,\n      end_date: end,\n      ...opts\n    });\n  }\n\n  protected abstract request<Result>(url: string, opts: IRawParams): Promise<Result>;\n}\n"]}