var fixerApi = (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var constants = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DEFAULT_URL = void 0;
	exports.DEFAULT_URL = 'http://data.fixer.io/api';

	});

	unwrapExports(constants);
	var constants_1 = constants.DEFAULT_URL;

	var formatDate_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ensureDateString = void 0;
	const padNumber = (num) => (num < 10 ? `0${num}` : num.toString());
	function ensureDateString(input) {
	    const RE_DATE = /^\d{4}-\d{2}-\d{2}$/;
	    if (typeof input === 'string' && RE_DATE.test(input)) {
	        return input;
	    }
	    if (input instanceof Date) {
	        return formatDate(input);
	    }
	    throw new TypeError(`Invalid date argument: ${input}`);
	}
	exports.ensureDateString = ensureDateString;
	function formatDate(date) {
	    return `${date.getUTCFullYear()}-${padNumber(date.getMonth() + 1)}-${padNumber(date.getDate())}`;
	}
	exports.default = formatDate;

	});

	unwrapExports(formatDate_1);
	var formatDate_2 = formatDate_1.ensureDateString;

	var Fixer_1 = createCommonjsModule(function (module, exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Fixer = void 0;


	class Fixer {
	    constructor(opts = {}) {
	        this.basicOptions = {
	            baseUrl: opts.baseUrl || constants.DEFAULT_URL,
	            accessKey: opts.accessKey
	        };
	    }
	    set({ baseUrl, accessKey } = {}) {
	        this.basicOptions.baseUrl = baseUrl || this.basicOptions.baseUrl;
	        this.basicOptions.accessKey = accessKey || this.basicOptions.accessKey;
	        return this;
	    }
	    forDate(date, opts = {}) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return this.request(`/${formatDate_1.ensureDateString(date)}`, opts);
	        });
	    }
	    latest(opts = {}) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return this.request('/latest', opts);
	        });
	    }
	    symbols(opts = {}) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return this.request('/symbols', opts);
	        });
	    }
	    convert(from, to, amount, date) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return this.request('/convert', {
	                from,
	                to,
	                amount,
	                date
	            });
	        });
	    }
	    timeseries(startDate, endDate, opts = {}) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const start = formatDate_1.ensureDateString(startDate);
	            const end = formatDate_1.ensureDateString(endDate);
	            return this.request('/timeseries', Object.assign({ start_date: start, end_date: end }, opts));
	        });
	    }
	}
	exports.Fixer = Fixer;

	});

	unwrapExports(Fixer_1);
	var Fixer_2 = Fixer_1.Fixer;

	var stringifyOptions_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function stringifyOptions(opts) {
	    return Object.entries(opts)
	        .map(([key, value]) => `${key}=${encodeURIComponent(`${value instanceof Array ? value.join(',') : value}`)}`)
	        .join('&');
	}
	exports.default = stringifyOptions;

	});

	unwrapExports(stringifyOptions_1);

	var NodeFixer_1 = createCommonjsModule(function (module, exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	class NodeFixer extends Fixer_1.Fixer {
	    constructor(fetch, ...restParams) {
	        super(...restParams);
	        this.fetch = fetch;
	    }
	    request(path, opts) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const accessKey = opts.access_key || this.basicOptions.accessKey;
	            if (!accessKey) {
	                throw new Error('access_key is required to use fixer');
	            }
	            const filteredOptions = Object.entries(opts).reduce((acc, [key, value]) => (Object.assign(Object.assign({}, acc), (value ? { [key]: value } : {}))), {
	                access_key: accessKey
	            });
	            const url = `${this.basicOptions.baseUrl}${path}`;
	            const response = yield this.fetch(`${url}?${stringifyOptions_1.default(filteredOptions)}`);
	            let jsonResponse;
	            try {
	                jsonResponse = yield response.json();
	            }
	            catch (_a) {
	                throw new Error(`Request to ${url} resulted in non-JSON response`);
	            }
	            if (jsonResponse.error) {
	                throw new Error(`${jsonResponse.error.type}: ${jsonResponse.error.info}`);
	            }
	            return jsonResponse;
	        });
	    }
	}
	exports.default = NodeFixer;

	});

	unwrapExports(NodeFixer_1);

	var index_browser = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.default = new NodeFixer_1.default(window.fetch.bind(window));

	});

	var index_browser$1 = unwrapExports(index_browser);

	return index_browser$1;

}());
