{"version":3,"file":"NodeFixer.js","sourceRoot":"","sources":["../src/NodeFixer.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mCAA4C;AAC5C,yDAAkD;AAQlD,MAAM,SAAU,SAAQ,aAAK;IAG3B,YAAY,KAAc,EAAE,GAAG,UAAiB;QAC9C,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEK,OAAO,CAAS,IAAY,EAAE,IAAgB;;YAClD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;YAEjE,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;YAED,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CACjD,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,iCAClB,GAAG,GACH,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAClC,EACF;gBACE,UAAU,EAAE,SAAS;aACtB,CACF,CAAC;YAEF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,EAAE,CAAC;YAElD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,0BAAgB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjF,IAAI,YAAY,CAAC;YACjB,IAAI;gBACF,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;aACtC;YAAC,WAAM;gBACN,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,gCAAgC,CAAC,CAAC;aACpE;YAED,IAAI,YAAY,CAAC,KAAK,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3E;YAED,OAAO,YAAY,CAAC;QACtB,CAAC;KAAA;CACF;AAED,kBAAe,SAAS,CAAC","sourcesContent":["import { Fixer, IRawParams } from './Fixer';\nimport stringifyOptions from './stringifyOptions';\n\ntype Fetcher = (\n  url: string\n) => Promise<{\n  readonly json: () => any;\n}>;\n\nclass NodeFixer extends Fixer {\n  public fetch: Fetcher;\n\n  constructor(fetch: Fetcher, ...restParams: any[]) {\n    super(...restParams);\n    this.fetch = fetch;\n  }\n\n  async request<Result>(path: string, opts: IRawParams): Promise<Result> {\n    const accessKey = opts.access_key || this.basicOptions.accessKey;\n\n    if (!accessKey) {\n      throw new Error('access_key is required to use fixer');\n    }\n\n    const filteredOptions = Object.entries(opts).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        ...(value ? { [key]: value } : {})\n      }),\n      {\n        access_key: accessKey\n      }\n    );\n\n    const url = `${this.basicOptions.baseUrl}${path}`;\n\n    const response = await this.fetch(`${url}?${stringifyOptions(filteredOptions)}`);\n\n    let jsonResponse;\n    try {\n      jsonResponse = await response.json();\n    } catch {\n      throw new Error(`Request to ${url} resulted in non-JSON response`);\n    }\n\n    if (jsonResponse.error) {\n      throw new Error(`${jsonResponse.error.type}: ${jsonResponse.error.info}`);\n    }\n\n    return jsonResponse;\n  }\n}\n\nexport default NodeFixer;\n"]}